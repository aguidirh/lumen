// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	list "github.com/aguidirh/lumen/pkg/list"
	gomock "go.uber.org/mock/gomock"
)

// MockLister is a mock of Lister interface.
type MockLister struct {
	ctrl     *gomock.Controller
	recorder *MockListerMockRecorder
	isgomock struct{}
}

// MockListerMockRecorder is the mock recorder for MockLister.
type MockListerMockRecorder struct {
	mock *MockLister
}

// NewMockLister creates a new mock instance.
func NewMockLister(ctrl *gomock.Controller) *MockLister {
	mock := &MockLister{ctrl: ctrl}
	mock.recorder = &MockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLister) EXPECT() *MockListerMockRecorder {
	return m.recorder
}

// BundleVersionsByChannel mocks base method.
func (m *MockLister) BundleVersionsByChannel(catalogRef, pkgName, channelName string) ([]list.ChannelEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BundleVersionsByChannel", catalogRef, pkgName, channelName)
	ret0, _ := ret[0].([]list.ChannelEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BundleVersionsByChannel indicates an expected call of BundleVersionsByChannel.
func (mr *MockListerMockRecorder) BundleVersionsByChannel(catalogRef, pkgName, channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BundleVersionsByChannel", reflect.TypeOf((*MockLister)(nil).BundleVersionsByChannel), catalogRef, pkgName, channelName)
}

// Catalogs mocks base method.
func (m *MockLister) Catalogs(version string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Catalogs", version)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Catalogs indicates an expected call of Catalogs.
func (mr *MockListerMockRecorder) Catalogs(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catalogs", reflect.TypeOf((*MockLister)(nil).Catalogs), version)
}

// ChannelsByPackage mocks base method.
func (m *MockLister) ChannelsByPackage(catalogRef, pkgName string) ([]list.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelsByPackage", catalogRef, pkgName)
	ret0, _ := ret[0].([]list.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelsByPackage indicates an expected call of ChannelsByPackage.
func (mr *MockListerMockRecorder) ChannelsByPackage(catalogRef, pkgName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelsByPackage", reflect.TypeOf((*MockLister)(nil).ChannelsByPackage), catalogRef, pkgName)
}

// PackagesByCatalog mocks base method.
func (m *MockLister) PackagesByCatalog(catalogRef string) ([]list.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackagesByCatalog", catalogRef)
	ret0, _ := ret[0].([]list.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackagesByCatalog indicates an expected call of PackagesByCatalog.
func (mr *MockListerMockRecorder) PackagesByCatalog(catalogRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackagesByCatalog", reflect.TypeOf((*MockLister)(nil).PackagesByCatalog), catalogRef)
}

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
	isgomock struct{}
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// PrintBundles mocks base method.
func (m *MockPrinter) PrintBundles(pkgName, channelName string, bundles []list.ChannelEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintBundles", pkgName, channelName, bundles)
}

// PrintBundles indicates an expected call of PrintBundles.
func (mr *MockPrinterMockRecorder) PrintBundles(pkgName, channelName, bundles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintBundles", reflect.TypeOf((*MockPrinter)(nil).PrintBundles), pkgName, channelName, bundles)
}

// PrintCatalogs mocks base method.
func (m *MockPrinter) PrintCatalogs(ocpVersion string, catalogs []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintCatalogs", ocpVersion, catalogs)
}

// PrintCatalogs indicates an expected call of PrintCatalogs.
func (mr *MockPrinterMockRecorder) PrintCatalogs(ocpVersion, catalogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintCatalogs", reflect.TypeOf((*MockPrinter)(nil).PrintCatalogs), ocpVersion, catalogs)
}

// PrintChannels mocks base method.
func (m *MockPrinter) PrintChannels(channels []list.Channel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintChannels", channels)
}

// PrintChannels indicates an expected call of PrintChannels.
func (mr *MockPrinterMockRecorder) PrintChannels(channels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintChannels", reflect.TypeOf((*MockPrinter)(nil).PrintChannels), channels)
}

// PrintPackages mocks base method.
func (m *MockPrinter) PrintPackages(packages []list.Package) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintPackages", packages)
}

// PrintPackages indicates an expected call of PrintPackages.
func (mr *MockPrinterMockRecorder) PrintPackages(packages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintPackages", reflect.TypeOf((*MockPrinter)(nil).PrintPackages), packages)
}
