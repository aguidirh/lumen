// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	digest "github.com/opencontainers/go-digest"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), args...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// MockImager is a mock of Imager interface.
type MockImager struct {
	ctrl     *gomock.Controller
	recorder *MockImagerMockRecorder
	isgomock struct{}
}

// MockImagerMockRecorder is the mock recorder for MockImager.
type MockImagerMockRecorder struct {
	mock *MockImager
}

// NewMockImager creates a new mock instance.
func NewMockImager(ctrl *gomock.Controller) *MockImager {
	mock := &MockImager{ctrl: ctrl}
	mock.recorder = &MockImagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImager) EXPECT() *MockImagerMockRecorder {
	return m.recorder
}

// CopyToOci mocks base method.
func (m *MockImager) CopyToOci(imageRef, ociDir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToOci", imageRef, ociDir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyToOci indicates an expected call of CopyToOci.
func (mr *MockImagerMockRecorder) CopyToOci(imageRef, ociDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToOci", reflect.TypeOf((*MockImager)(nil).CopyToOci), imageRef, ociDir)
}

// RemoteInfo mocks base method.
func (m *MockImager) RemoteInfo(imageRef string) (string, string, digest.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteInfo", imageRef)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(digest.Digest)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// RemoteInfo indicates an expected call of RemoteInfo.
func (mr *MockImagerMockRecorder) RemoteInfo(imageRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteInfo", reflect.TypeOf((*MockImager)(nil).RemoteInfo), imageRef)
}

// MockFsIO is a mock of FsIO interface.
type MockFsIO struct {
	ctrl     *gomock.Controller
	recorder *MockFsIOMockRecorder
	isgomock struct{}
}

// MockFsIOMockRecorder is the mock recorder for MockFsIO.
type MockFsIOMockRecorder struct {
	mock *MockFsIO
}

// NewMockFsIO creates a new mock instance.
func NewMockFsIO(ctrl *gomock.Controller) *MockFsIO {
	mock := &MockFsIO{ctrl: ctrl}
	mock.recorder = &MockFsIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFsIO) EXPECT() *MockFsIOMockRecorder {
	return m.recorder
}

// CopyDirectory mocks base method.
func (m *MockFsIO) CopyDirectory(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDirectory", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDirectory indicates an expected call of CopyDirectory.
func (mr *MockFsIOMockRecorder) CopyDirectory(src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDirectory", reflect.TypeOf((*MockFsIO)(nil).CopyDirectory), src, dst)
}

// UntarFromStream mocks base method.
func (m *MockFsIO) UntarFromStream(r io.Reader, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntarFromStream", r, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntarFromStream indicates an expected call of UntarFromStream.
func (mr *MockFsIOMockRecorder) UntarFromStream(r, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntarFromStream", reflect.TypeOf((*MockFsIO)(nil).UntarFromStream), r, dest)
}
